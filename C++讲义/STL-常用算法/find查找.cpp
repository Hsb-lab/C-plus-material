//常用查找算法
//学习目标：掌握常用的查找算法

//算法简介：
//1.find;//查找元素
//2.find_if;//按条件查找元素
//3.adjacent_find;//查找相邻重复元素
//4.binary_search;//二分查找法
//5.count;//统计元素个数
//6.count_if;//按条件统计元素个数

//find
//功能描述：查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()

//函数原型：
//find(iterator beg,iterator end,value);
//按照查找元素，找到返回指定位置的迭代器，找不到返回结束迭代器end();
//beg开始迭代器
//end结束迭代器
//value查找的元素

//总结：
//利用find可以在容器中找指定的元素，返回值是迭代器

#include<iostream>
using namespace std;
#include<algorithm>
#include<vector>

//查找内置的数据类型
void test01()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}

	vector<int>::iterator it =  find(v.begin(), v.end(), 5);
	if (it == v.end())
	{
		cout << "为查找到元素" << endl;
	}
	else
	{
		cout << "查找到元素：" << *it << endl;
	}
}

class Person
{
public:
	Person(string name,int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	bool operator==(const Person &p)const
	{
		//两种写法都可以
		//if (this->m_Name == p.m_Name && this->m_Age == p.m_Age) return true;
		//else return false;

		return this->m_Name == p.m_Name && this->m_Age == p.m_Age;
	}

	string m_Name;
	int m_Age;
};

//查找自定义的数据类型
void test02()
{
	vector<Person>v;

	//创建数据
	Person p1("aaa", 10);
	Person p2("bbb", 20);
	Person p3("ccc", 30);
	Person p4("ddd", 40);

	//放入到容器中
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);

	//拷贝构造
	Person pp(p2);

	//要在Person类里面重载 ==
	//让底层的find知道如何对比Person数据类型
	vector<Person>::iterator it = find(v.begin(), v.end(),pp);

	if (it == v.end())
	{
		cout << "未查找到元素" << endl;
	}
	else
	{
		cout << "查找到该元素" << endl;
		cout << "姓名：" << it->m_Name << " 年龄：" << it->m_Age << endl;
	}
}

int main()
{
	//test01();
	test02();
}