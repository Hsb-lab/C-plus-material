//C++提高编程
//本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层的应用

//模板
//模板的概念：
//模板就是建立通用的模具，大大提高复用性

//模板的特点：
//模板本可以直接使用，它只是一个框架
//模板的通用并不是万能的

//函数模板
//1.C++另一种编程思想为泛型编程，主要利用的技术就是模板
//2.C++提供两种模板机制：函数模板 和 类模板

//函数模板语法
//函数模板作用：
//建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表
//语法：
//1.template<typename T>
//2.函数的声明或定义
//解释：
//1.template -- 声明创建模板
//2.typename -- 表明其后面的符号是一种数据类型，可以用class代替
//3.T -- 通用的数据类型，名称可以替换，通常为大写字母
#include<iostream>
using namespace std;
//函数模板
template<typename T>//声明一个模板，告诉编译器后面代码中紧跟着的T不要报错，T是一个通用的数据类型
//声明模板后必须马上使用
void mySwap(T & a,T & b)
{
	T temp = a;
	a = b;
	b = temp;
}
//总结：
//1.函数模板利用关键字template
//2.使用函数模板有两种方式：自动类型推导  和  显示指定你类型
//3.函数模板的目的是为了提高复用性，将类型参数化
void test01()
{
	int a = 10;
	int b = 20;
	//利用函数模板交换
	//两种方式使用函数模板
	//1.自动类型推导
	mySwap(a, b);
	cout << "a = " << a << endl;
	cout << "b = " << b << endl;

	double c = 1.1;
	double d = 2.2;
	//显示指定类型  （不可以完成强制类型转换的操作）
	mySwap<double>(c, d);
	cout << "c = " << c << endl;
	cout << "d = " << d << endl;

}

int main()
{
	test01();
}